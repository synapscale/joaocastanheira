# Schema de Input para o Agente Principal (usando JSON Schema em formato YAML)
# Arquivo: src/agents/main_agent/inputs/schema.yaml
#
# Este schema define a estrutura de dados esperada para o payload de entrada
# que o agente principal recebe. Ele é usado para validar os dados de entrada,
# garantindo que o agente receba o que precisa para funcionar corretamente.
# Ferramentas como `jsonschema` em Python podem ser usadas para realizar essa validação
# no ponto de entrada da aplicação (ex: em `src/entrypoint.py` ou em um endpoint de API).
#
# Boas Práticas e Considerações AI-Friendly:
# - Clareza de Contrato: Um schema bem definido serve como um contrato claro sobre
#   o que o agente espera como entrada. Isso é crucial para integrações e para o desenvolvimento.
# - Validação Antecipada: Validar os inputs no início do fluxo previne erros
#   inesperados em estágios posteriores do processamento do agente.
# - Documentação Viva: O schema em si é uma forma de documentação. Comentários
#   detalhados (como estes) aumentam ainda mais sua utilidade.
# - Flexibilidade com `additionalProperties`: Controla se propriedades não definidas
#   no schema são permitidas. `false` (como usado aqui no nível raiz) torna o schema mais estrito.
#   Em sub-objetos como `user_profile.preferences`, `additionalProperties: true` pode ser útil
#   para permitir extensibilidade sem modificar o schema base.

$schema: "http://json-schema.org/draft-07/schema#" # Declara a versão do JSON Schema usada.

title: "MainAgentInput"
description: "Define a estrutura de input esperada para o Agente Vertical Principal. Esta estrutura será validada na entrada de cada requisição para o agente."
type: "object" # O tipo raiz do input é um objeto JSON.

properties:
  user_input:
    type: "string"
    description: "A mensagem ou consulta primária enviada pelo usuário. Este é o texto principal que o agente irá processar."
    minLength: 1 # Garante que o input do usuário não seja uma string vazia.

  session_id:
    type: "string"
    description: "Identificador único para a sessão de conversa atual. Essencial para recuperar e manter o histórico de chat (memória da conversa)."
    # format: "uuid" # Opcional: Se você quiser impor que o session_id seja um UUID válido.
    minLength: 1 # Garante que o session_id não seja uma string vazia.

  user_profile:
    type: "object"
    description: "(Opcional) Informações sobre o usuário para personalizar a interação e o comportamento do agente. Pode ser omitido se não disponível."
    properties:
      user_id:
        type: "string"
        description: "Identificador único para o usuário (ex: ID do banco de dados, email hash)."
      name:
        type: "string"
        description: "Nome do usuário, se conhecido."
      preferences:
        type: "object"
        description: "(Opcional) Preferências específicas do usuário que podem influenciar o comportamento do agente (ex: idioma, nível de detalhe da resposta)."
        properties:
          language:
            type: "string"
            description: "Idioma preferido para as respostas do agente (ex: 'pt-BR', 'en-US')."
            default: "pt-BR" # Um valor padrão pode ser útil se a preferência não for fornecida.
          response_length:
            type: "string"
            enum: ["short", "medium", "detailed"] # Define um conjunto de valores permitidos.
            default: "medium"
            description: "Nível de detalhe preferido para as respostas."
        additionalProperties: true # Permite que outras preferências não listadas aqui sejam incluídas (ex: tema, fuso horário).
      # Adicione outros campos relevantes do perfil do usuário aqui.
      # Exemplo: location, roles, permissions, etc.
    additionalProperties: true # Permite que o objeto user_profile contenha outros campos não explicitamente definidos aqui.

  request_config:
    type: "object"
    description: "(Opcional) Configurações específicas para esta requisição que podem sobrescrever os padrões globais ou do agente. A lógica do agente precisa ser capaz de interpretar e aplicar essas sobrescritas."
    properties:
      output_language:
        type: "string"
        description: "Sobrescreve o idioma de saída padrão apenas para esta requisição."
      output_format:
        type: "string"
        description: "Especifica um formato de saída desejado para esta requisição (ex: 'markdown', 'json', 'plain_text'). O agente precisará ter lógica para suportar diferentes formatos."
      # Adicione outros parâmetros configuráveis por requisição aqui.
      # Exemplo: specific_llm_temperature, use_specific_tool_version, etc.
    additionalProperties: true

  request_context:
    type: "object"
    description: "(Opcional) Informações contextuais sobre a origem ou natureza da requisição. Pode ser útil para logging, analytics ou para adaptar o comportamento do agente."
    properties:
      channel:
        type: "string"
        description: "O canal através do qual a requisição foi feita (ex: 'web_chat', 'mobile_app', 'slack_bot', 'api_direct')."
      ip_address:
        type: "string"
        # format: "ipv4" # ou "ipv6" - Valida o formato do IP, se necessário.
        description: "Endereço IP de origem da requisição (se aplicável e se as políticas de privacidade permitirem o rastreamento)."
      # Adicione outros metadados contextuais relevantes aqui.
      # Exemplo: user_agent_string, request_timestamp, correlation_id, etc.
    additionalProperties: true

# Campos obrigatórios no payload de input.
# Se algum destes campos estiver faltando, a validação do schema falhará.
required:
  - user_input
  - session_id

# Controla se propriedades adicionais (não definidas em `properties` no nível raiz)
# são permitidas no objeto de input. 
# `false` torna o schema mais estrito: apenas as propriedades definidas são aceitas.
# `true` permitiria que o input contivesse outras chaves além das listadas.
additionalProperties: false

