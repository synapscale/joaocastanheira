# Arquivo de Configuração Principal para o Agente Orquestrador (Main Agent)
# Localização: src/agents/main_agent/agent.py
#
# Este arquivo define as configurações de alto nível que governam o comportamento do agente principal,
# incluindo sua identidade, como ele interage com subagentes, e outras lógicas de orquestração.
# As configurações aqui podem ser referenciadas pela classe MainAgent em agent.py.

# Nome de identificação do agente principal. Usado para logging e possivelmente em prompts.
agent_name: "MainVerticalOrchestratorAgent"

# Lista dos IDs dos subagentes que este agente principal está configurado para orquestrar.
# IMPORTANTE: 
#   - Cada ID deve corresponder ao nome do diretório do respectivo subagente em `src/agents/sub_agents/`.
#   - Estes IDs também devem ser referenciados no arquivo `src/agents/main_agent/tools/tools.yaml` 
#     se a delegação para subagentes for tratada como uma "ferramenta" que o LLM principal pode invocar.
sub_agent_ids:
  - "sub_agent_1" # Ex: Subagente para Análise de Dados Complexos
  - "sub_agent_2" # Ex: Subagente para Busca Avançada em Documentos Específicos
  - "sub_agent_3" # Ex: Subagente para Interações com APIs Externas (ex: CRM, Calendário)
  - "sub_agent_4" # Ex: Subagente para Geração de Conteúdo Criativo (textos, ideias)
  - "sub_agent_5" # Ex: Subagente para Gerenciamento de Perfil de Usuário e Preferências

# Configurações de comportamento padrão do agente principal.
# Estas podem ser sobrescritas por configurações de requisição, se a lógica do agente permitir.
default_language: "pt-BR" # Idioma padrão para as respostas do agente, caso não especificado na requisição.

# Configurações para a lógica de orquestração do agente.
# Estes são exemplos e podem ser expandidos conforme a complexidade do seu agente.
#
# Exemplo: Limiar de confiança para o LLM decidir usar uma ferramenta ou subagente.
# Se o LLM principal (ou um modelo de planejamento separado) calcular uma pontuação de confiança
# para uma ação, este limiar pode ser usado para tomar a decisão.
# tool_invocation_confidence_threshold: 0.75

# Exemplo: Profundidade máxima de chamadas sequenciais a subagentes para uma única requisição do usuário.
# Ajuda a prevenir loops infinitos ou cadeias de processamento excessivamente longas e custosas.
# max_sub_agent_recursion_depth: 3

# Flags de funcionalidades (Feature Flags) para habilitar ou desabilitar comportamentos específicos do agente.
# Útil para testes A/B, lançamentos graduais de funcionalidades, ou configuração dinâmica.
feature_flags:
  # Permite que o agente faça perguntas de esclarecimento ao usuário se a solicitação for ambígua.
  # Técnica AI-Friendly: Melhora a compreensão e a qualidade da resposta final, evitando suposições.
  allow_clarification_questions: true
  
  # Se o RAG (Retrieval Augmented Generation) não encontrar informações relevantes na base de conhecimento,
  # permite que o LLM principal tente responder usando seu conhecimento geral.
  # Técnica AI-Friendly: Oferece uma resposta mesmo que a base específica não tenha o conteúdo, 
  # mas é importante que o agente indique a fonte do seu conhecimento (RAG vs. Geral).
  enable_rag_fallback_to_general_llm: true
  
  # Habilita logging extremamente detalhado de todo o fluxo de processamento.
  # Use com cautela em produção, pois pode gerar grande volume de logs e impactar performance.
  # Ideal para debugging e desenvolvimento.
  log_full_trace: false

# Configuração de como o agente principal deve lidar com erros provenientes de subagentes ou ferramentas.
error_handling:
  # Resposta padrão a ser enviada ao usuário em caso de erro interno não tratado especificamente.
  default_error_response: "Desculpe, ocorreu um erro interno ao processar sua solicitação. Por favor, tente novamente mais tarde."
  
  # Estratégia de tratamento de erro (exemplos, a lógica precisa ser implementada em agent.py):
  # - "retry_once": Tenta executar a ação falha mais uma vez.
  # - "report_to_user": Informa o usuário sobre o erro específico (com cuidado para não expor detalhes sensíveis).
  # - "escalate": Notifica um sistema de monitoramento ou administrador.
  # - "fallback_strategy_X": Tenta uma abordagem alternativa para cumprir a solicitação.
  # strategy: "report_to_user"

# Espaço para outras configurações específicas da orquestração do agente principal.
# Exemplo: Caminho para um template de prompt usado por um "agente planejador" (meta-agente)
# que decide qual subagente ou ferramenta usar com base na consulta do usuário.
# planner_prompt_template_path: "src/agents/main_agent/planner_prompt.j2"

