/**
 * Exemplo de uso do validador de API
 * Demonstra como verificar se a integra√ß√£o com a API Synapscale est√° funcionando corretamente
 */

import { apiValidator, validateApiQuick } from './validator'

/**
 * Executa valida√ß√£o completa da API e exibe relat√≥rio
 */
export async function runFullApiValidation(): Promise<void> {
  console.log('üöÄ Iniciando valida√ß√£o completa da API Synapscale...\n')

  try {
    // Executar valida√ß√£o completa
    const result = await apiValidator.validateAll()
    
    // Gerar e exibir relat√≥rio
    const report = apiValidator.generateReport(result)
    console.log(report)
    
    // Resultados adicionais
    if (result.isValid) {
      console.log('üéâ Configura√ß√£o da API est√° perfeita!')
    } else {
      console.log('‚ö†Ô∏è  Foram encontrados problemas que precisam ser corrigidos.')
      
      // Sugest√µes de corre√ß√£o
      if (result.errors.some(e => e.includes('conectividade'))) {
        console.log('\nüí° Sugest√µes:')
        console.log('‚Ä¢ Verifique se a URL da API est√° correta no arquivo .env')
        console.log('‚Ä¢ Confirme se o servidor da API est√° rodando')
        console.log('‚Ä¢ Teste a conectividade de rede')
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante a valida√ß√£o:', error)
  }
}

/**
 * Executa apenas teste de conectividade r√°pido
 */
export async function runQuickConnectivityTest(): Promise<boolean> {
  console.log('‚ö° Testando conectividade b√°sica...')
  
  try {
    const isConnected = await validateApiQuick()
    
    if (isConnected) {
      console.log('‚úÖ Conectividade OK')
      return true
    } else {
      console.log('‚ùå Falha na conectividade')
      return false
    }
  } catch (error) {
    console.error('‚ùå Erro no teste de conectividade:', error)
    return false
  }
}

/**
 * Executa valida√ß√£o de endpoints espec√≠ficos
 */
export async function validateSpecificEndpoints(endpoints: string[]): Promise<void> {
  console.log(`üîç Validando endpoints espec√≠ficos: ${endpoints.join(', ')}`)
  
  try {
    const result = await apiValidator.validateAll()
    
    // Filtrar apenas os endpoints solicitados
    const filteredEndpoints = result.endpoints.filter(endpoint => 
      endpoints.some(requested => endpoint.path.includes(requested))
    )
    
    console.log('\nüìä Resultados:')
    filteredEndpoints.forEach(endpoint => {
      const icon = endpoint.status === 'success' ? '‚úÖ' : '‚ùå'
      console.log(`${icon} ${endpoint.name}: ${endpoint.message}`)
    })
    
  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o:', error)
  }
}

/**
 * Monitora a sa√∫de da API em intervalos regulares
 */
export function startApiHealthMonitoring(intervalMs: number = 60000): () => void {
  console.log(`üîÑ Iniciando monitoramento da API (intervalo: ${intervalMs}ms)`)
  
  const interval = setInterval(async () => {
    try {
      const isHealthy = await validateApiQuick()
      const timestamp = new Date().toISOString()
      
      if (isHealthy) {
        console.log(`‚úÖ [${timestamp}] API saud√°vel`)
      } else {
        console.log(`‚ùå [${timestamp}] API com problemas`)
      }
    } catch (error) {
      console.error(`‚ùå [${new Date().toISOString()}] Erro no monitoramento:`, error)
    }
  }, intervalMs)
  
  // Retorna fun√ß√£o para parar o monitoramento
  return () => {
    clearInterval(interval)
    console.log('üõë Monitoramento da API interrompido')
  }
}

/**
 * Exemplo de uso em desenvolvimento
 */
export async function developmentApiCheck(): Promise<void> {
  console.log('üß™ Executando verifica√ß√£o de desenvolvimento...\n')
  
  // 1. Teste r√°pido de conectividade
  const isConnected = await runQuickConnectivityTest()
  
  if (!isConnected) {
    console.log('‚ùå Conectividade falhou. Abortando testes adicionais.')
    return
  }
  
  console.log('')
  
  // 2. Valida√ß√£o completa
  await runFullApiValidation()
  
  console.log('')
  
  // 3. Teste de endpoints cr√≠ticos
  await validateSpecificEndpoints(['auth', 'health', 'workspaces'])
}

/**
 * Exemplo de uso em produ√ß√£o
 */
export async function productionApiCheck(): Promise<boolean> {
  console.log('üè≠ Executando verifica√ß√£o de produ√ß√£o...')
  
  try {
    const result = await apiValidator.validateAll()
    
    // Em produ√ß√£o, ser mais rigoroso
    const criticalEndpointsOk = result.endpoints
      .filter(e => ['Health Check', 'Auth Me', 'Workspaces'].includes(e.name))
      .every(e => e.status === 'success')
    
    const overallHealthy = result.overall.availability >= 90 // 90% de disponibilidade m√≠nima
    
    const isProductionReady = criticalEndpointsOk && overallHealthy
    
    if (isProductionReady) {
      console.log('‚úÖ API pronta para produ√ß√£o')
    } else {
      console.log('‚ùå API N√ÉO est√° pronta para produ√ß√£o')
      console.log(`‚Ä¢ Disponibilidade: ${result.overall.availability.toFixed(1)}% (m√≠nimo: 90%)`)
      console.log(`‚Ä¢ Endpoints cr√≠ticos: ${criticalEndpointsOk ? 'OK' : 'FALHA'}`)
    }
    
    return isProductionReady
    
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o de produ√ß√£o:', error)
    return false
  }
}

// Exportar fun√ß√µes para uso direto
export {
  apiValidator,
  validateApiQuick
} 