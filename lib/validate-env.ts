/**
 * Valida√ß√£o completa das vari√°veis de ambiente
 * Verifica se todas as configura√ß√µes necess√°rias est√£o presentes e v√°lidas
 */

interface EnvValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
  config: Record<string, any>;
}

export function validateAndPrint(): EnvValidationResult {
  const errors: string[] = [];
  const warnings: string[] = [];
  const config: Record<string, any> = {};

  // Vari√°veis obrigat√≥rias
  const requiredVars = [
    'NEXT_PUBLIC_API_URL',
    'NEXT_PUBLIC_WS_URL'
  ];

  // Vari√°veis opcionais com valores padr√£o
  const optionalVars = [
    'NEXT_PUBLIC_APP_ENV',
    'NEXT_PUBLIC_JWT_STORAGE_KEY',
    'NEXT_PUBLIC_REFRESH_TOKEN_KEY',
    'NEXT_PUBLIC_APP_NAME',
    'NEXT_PUBLIC_COMPANY_NAME'
  ];

  console.log('\nüîç === VALIDA√á√ÉO DE AMBIENTE ===');

  // Verificar vari√°veis obrigat√≥rias
  for (const varName of requiredVars) {
    const value = process.env[varName];
    config[varName] = value;

    if (!value) {
      errors.push(`‚ùå ${varName} √© obrigat√≥rio mas n√£o foi encontrado`);
    } else {
      console.log(`‚úÖ ${varName}: ${value}`);
      
      // Valida√ß√µes espec√≠ficas
      if (varName.includes('URL')) {
        try {
          new URL(value);
        } catch {
          errors.push(`‚ùå ${varName} n√£o √© uma URL v√°lida: ${value}`);
        }
      }
    }
  }

  // Verificar vari√°veis opcionais
  for (const varName of optionalVars) {
    const value = process.env[varName];
    config[varName] = value;

    if (value) {
      console.log(`‚úÖ ${varName}: ${value}`);
    } else {
      warnings.push(`‚ö†Ô∏è ${varName} n√£o definido (usando padr√£o)`);
    }
  }

  // Valida√ß√µes espec√≠ficas de URL
  const apiUrl = process.env.NEXT_PUBLIC_API_URL;
  if (apiUrl) {
    if (apiUrl.includes('/api/v1/v1')) {
      errors.push(`‚ùå NEXT_PUBLIC_API_URL cont√©m /api/v1 duplicado: ${apiUrl}`);
      console.log('üí° Sugest√£o: Use apenas a URL base (ex: http://localhost:8000)');
    }
  }

  // Verificar consist√™ncia entre URLs
  const wsUrl = process.env.NEXT_PUBLIC_WS_URL;
  if (apiUrl && wsUrl) {
    try {
      const apiHost = new URL(apiUrl).host;
      const wsHost = new URL(wsUrl).host;
      
      if (apiHost !== wsHost) {
        warnings.push(`‚ö†Ô∏è API e WebSocket usam hosts diferentes: ${apiHost} vs ${wsHost}`);
      }
    } catch {
      // URLs inv√°lidas j√° foram reportadas acima
    }
  }

  // Verificar ambiente
  const env = process.env.NEXT_PUBLIC_APP_ENV;
  if (env && !['development', 'staging', 'production'].includes(env)) {
    warnings.push(`‚ö†Ô∏è NEXT_PUBLIC_APP_ENV tem valor n√£o padr√£o: ${env}`);
  }

  // Mostrar resumo
  console.log('\nüìä === RESUMO DA VALIDA√á√ÉO ===');
  console.log(`‚úÖ Configura√ß√µes v√°lidas: ${requiredVars.length - errors.length}/${requiredVars.length}`);
  console.log(`‚ö†Ô∏è Avisos: ${warnings.length}`);
  console.log(`‚ùå Erros: ${errors.length}`);

  if (errors.length > 0) {
    console.log('\n‚ùå === ERROS ENCONTRADOS ===');
    errors.forEach(error => console.log(error));
    console.log('\nüí° Crie um arquivo .env baseado no .env.example');
  }

  if (warnings.length > 0) {
    console.log('\n‚ö†Ô∏è === AVISOS ===');
    warnings.forEach(warning => console.log(warning));
  }

  console.log('\nüîç === FIM DA VALIDA√á√ÉO ===\n');

  return {
    isValid: errors.length === 0,
    errors,
    warnings,
    config
  };
}

/**
 * Valida√ß√£o r√°pida para uso em runtime
 */
export function quickValidate(): boolean {
  const required = ['NEXT_PUBLIC_API_URL', 'NEXT_PUBLIC_WS_URL'];
  return required.every(varName => !!process.env[varName]);
}

/**
 * Obter informa√ß√µes de debug do ambiente
 */
export function getDebugInfo(): Record<string, any> {
  return {
    nodeEnv: process.env.NODE_ENV,
    appEnv: process.env.NEXT_PUBLIC_APP_ENV,
    apiUrl: process.env.NEXT_PUBLIC_API_URL,
    wsUrl: process.env.NEXT_PUBLIC_WS_URL,
    timestamp: new Date().toISOString(),
    userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : 'Server',
    isClient: typeof window !== 'undefined'
  };
} 