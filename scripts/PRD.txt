# Product Requirements Document - Admin Page Data Integration Fix

## Problem Statement
Ap√≥s an√°lise usando `apidof-mcp-server`, identifiquei problemas cr√≠ticos na p√°gina admin:

**üö® PROBLEMAS CONFIRMADOS:**
1. **Planos 100% Mockados**: Os 3 planos (Free, Pro, Enterprise) est√£o hardcoded no `context/plan-context.tsx`
2. **Dados de Analytics Mockados**: Receita, clientes e m√©tricas s√£o simulados, n√£o v√™m de endpoints reais
3. **Endpoints Admin Existem**: A API tem `/api/v1/analytics/admin/stats` e `/api/v1/marketplace/admin/reports/*` mas n√£o est√£o sendo usados
4. **Desconex√£o Frontend-Backend**: O frontend n√£o est√° consumindo os dados reais da API oficial

**IMPACTO:**
- Administradores veem dados fict√≠cios
- Imposs√≠vel tomar decis√µes baseadas em dados reais
- Experi√™ncia inconsistente entre desenvolvimento e produ√ß√£o

## Technical Requirements

### API Discovery Completed ‚úÖ
- **Ferramenta Usada**: `apidof-mcp-server` (seguindo regra absoluta)
- **Endpoints Identificados**:
  - `GET /api/v1/analytics/admin/stats` - Estat√≠sticas administrativas
  - `GET /api/v1/marketplace/admin/reports/revenue` - Relat√≥rio de receitas
  - `GET /api/v1/marketplace/admin/reports/downloads` - Relat√≥rio de downloads
  - `GET /api/v1/workspaces/` - Listar workspaces (para dados reais)
  - `GET /api/v1/analytics/overview` - Vis√£o geral de analytics

### Frontend Requirements
- [ ] **Remover dados mockados** do `context/plan-context.tsx`
- [ ] **Integrar endpoints reais** descobertos via API specification
- [ ] **Criar service layer** para admin analytics usando `apiService`
- [ ] **Implementar loading states** adequados para dados reais
- [ ] **Adicionar error handling** para falhas de API
- [ ] **Criar tipos TypeScript** baseados nos schemas da API
- [ ] **Implementar cache** para dados de analytics
- [ ] **Adicionar refresh autom√°tico** de dados em tempo real

### Backend Verification
- [ ] **Verificar se endpoints retornam dados reais** (n√£o mocks)
- [ ] **Confirmar autentica√ß√£o admin** nos endpoints descobertos
- [ ] **Validar schemas de resposta** vs tipos TypeScript
- [ ] **Testar performance** dos endpoints de admin
- [ ] **Verificar permiss√µes** de acesso aos dados administrativos

### Data Integration
- [ ] **Substituir mock plans** por dados reais do backend
- [ ] **Conectar m√©tricas de receita** ao endpoint oficial
- [ ] **Integrar dados de clientes** usando workspaces reais
- [ ] **Implementar analytics real-time** usando endpoints descobertos
- [ ] **Criar dashboard** baseado em dados reais da API

### Security & Performance
- [ ] **Validar permiss√µes admin** em todos os endpoints
- [ ] **Implementar rate limiting** para endpoints de admin
- [ ] **Adicionar logging** de acesso a dados administrativos
- [ ] **Otimizar queries** de analytics para performance
- [ ] **Implementar caching estrat√©gico** para dados pesados

## Acceptance Criteria

### ‚úÖ Dados Reais Integrados
- [ ] P√°gina admin mostra dados reais do banco de dados
- [ ] M√©tricas de receita v√™m do endpoint `/api/v1/marketplace/admin/reports/revenue`
- [ ] Estat√≠sticas administrativas usam `/api/v1/analytics/admin/stats`
- [ ] Dados de clientes baseados em workspaces reais da API

### ‚úÖ Performance & UX
- [ ] Loading states durante carregamento de dados reais
- [ ] Error handling para falhas de API
- [ ] Refresh autom√°tico de dados a cada 30 segundos
- [ ] Cache inteligente para reduzir chamadas desnecess√°rias

### ‚úÖ Type Safety
- [ ] Tipos TypeScript baseados nos schemas da API oficial
- [ ] Valida√ß√£o de dados recebidos da API
- [ ] IntelliSense completo para objetos de admin

### ‚úÖ Admin Experience
- [ ] Dashboard responsivo com dados reais
- [ ] Filtros funcionais para relat√≥rios
- [ ] Exporta√ß√£o de dados administrativos
- [ ] Alertas para m√©tricas cr√≠ticas

## Implementation Constraints

### Technology Stack
- **API Discovery**: Obrigat√≥rio uso do `apidof-mcp-server` (regra absoluta)
- **Service Layer**: Usar `apiService` existente em `@/lib/api/service`
- **State Management**: Manter context pattern existente, mas com dados reais
- **Types**: Gerar tipos baseados na API specification oficial
- **Caching**: Implementar com React Query ou SWR

### Dependencies
- [ ] **API Specification**: Todos os endpoints devem estar documentados
- [ ] **Authentication**: Admin permissions devem estar implementadas no backend
- [ ] **Database**: Dados reais devem existir para popular os dashboards
- [ ] **Performance**: Endpoints devem responder em <2s para boa UX

### Timeline Considerations
- **Fase 1**: Integra√ß√£o de endpoints b√°sicos (1-2 dias)
- **Fase 2**: Implementa√ß√£o de cache e otimiza√ß√µes (1 dia)
- **Fase 3**: Refinamento de UX e error handling (1 dia)

## Architecture Notes

### Service Layer Pattern
```typescript
// Criar admin-service.ts baseado nos endpoints descobertos
class AdminService {
  async getAdminStats() {
    return apiService.get('/api/v1/analytics/admin/stats')
  }
  
  async getRevenueReport(startDate: string, endDate: string) {
    return apiService.get('/api/v1/marketplace/admin/reports/revenue', {
      params: { start_date: startDate, end_date: endDate }
    })
  }
}
```

### Context Refactoring
- Manter API do context existente para compatibilidade
- Substituir dados mockados por chamadas reais
- Implementar loading/error states adequados
- Adicionar cache layer para performance

### Error Handling Strategy
- Fallback gracioso para dados mockados em caso de erro
- Logs detalhados para debugging
- Retry autom√°tico para falhas tempor√°rias
- Notifica√ß√µes para administradores sobre problemas

### Performance Optimization
- Lazy loading de dados pesados
- Pagination para listas grandes
- Debouncing para filtros em tempo real
- Background refresh sem bloquear UI

## Risk Assessment

### Technical Risks
- **Dados mockados em produ√ß√£o**: Verificar e substituir por dados reais
- **Performance de queries**: Analytics podem ser lentos, implementar cache
- **Seguran√ßa**: √Årea admin deve ser protegida adequadamente

### Business Risks  
- **Dados incorretos**: Podem levar a decis√µes erradas de neg√≥cio
- **Falta de m√©tricas**: Dificulta an√°lise e crescimento

### Mitigation Strategies
- Implementar logging para debug de APIs
- Fallbacks para quando n√£o h√° dados
- Monitoring de performance das queries

## Success Metrics
- **Precis√£o**: 100% dos dados v√™m do banco real
- **Performance**: APIs respondem em < 500ms
- **Confiabilidade**: Zero dados mockados em produ√ß√£o
- **Seguran√ßa**: Apenas admins acessam a √°rea

---

## Notes for Task Master Integration

Este PRD investigar√° e corrigir√°:
1. **Data Sources**: Identificar origem real dos dados
2. **API Integration**: Conectar frontend com backend real
3. **Analytics Implementation**: Implementar c√°lculos reais
4. **Security**: Proteger √°rea administrativa

**Comandos para usar**: 
```bash
task-master parse-prd scripts/PRD.txt --research --num-tasks=12
task-master analyze-complexity --research --threshold=6
task-master expand --all --research --force
task-master next
``` 