---
description: 
globs: 
alwaysApply: false
---
# **üö® API Integration - Absolute Rule**

**CRITICAL RULE**: Always use `apidof-mcp-server` when working on frontend features that need information about official API endpoints and backend structure.

---

## **üìã Mandatory API Discovery Process**

### **üîç ALWAYS Use apidof-mcp-server Before:**
- ‚úÖ Creating new API calls in frontend components
- ‚úÖ Debugging existing API integrations
- ‚úÖ Implementing admin panels or dashboards
- ‚úÖ Working with authentication flows
- ‚úÖ Building forms that submit to backend
- ‚úÖ Implementing data fetching hooks
- ‚úÖ Creating service layer functions
- ‚úÖ Troubleshooting API-related issues
- ‚úÖ Documenting API endpoints
- ‚úÖ Planning new features that require backend data

### **üõ†Ô∏è Available MCP Tools for API Discovery**
- **`mcp_API_specification_read_project_oas_67wbqv`** - Read complete OpenAPI specification
- **`mcp_API_specification_read_project_oas_ref_resources_67wbqv`** - Read specific endpoint details
- **`mcp_API_specification_refresh_project_oas_67wbqv`** - Refresh API spec from server

---

## **‚ö° Workflow Pattern**

### **Step 1: API Discovery (MANDATORY)**
```typescript
// ‚ùå NEVER start coding without API discovery
const fetchUserData = async () => {
  // Wrong: Guessing endpoint structure
  const response = await fetch('/api/users')
}

// ‚úÖ ALWAYS discover API first
// 1. Use mcp_API_specification_read_project_oas_67wbqv
// 2. Identify correct endpoints
// 3. Understand request/response schemas
// 4. Then implement
```

### **Step 2: Implementation with Verified Endpoints**
```typescript
// ‚úÖ Implementation based on API discovery
const fetchUserData = async (): Promise<UserResponse> => {
  // Using verified endpoint from API spec
  const response = await apiService.get<UserResponse>('/v1/users/profile')
  return response.data
}
```

---

## **üéØ Specific Use Cases**

### **Admin Panel Development**
```typescript
// ‚úÖ CORRECT: API discovery first
// 1. Check API spec for admin endpoints
// 2. Verify authentication requirements
// 3. Understand data schemas
// 4. Implement with proper types

// Example discovered endpoints:
// GET /v1/admin/users
// GET /v1/admin/analytics
// POST /v1/admin/plans
```

### **Authentication Integration**
```typescript
// ‚úÖ CORRECT: Verify auth endpoints
// 1. Discover auth flow endpoints
// 2. Understand token structure
// 3. Check refresh token mechanics
// 4. Implement proper error handling

// Example discovered endpoints:
// POST /v1/auth/login
// POST /v1/auth/refresh
// GET /v1/auth/me
```

### **Data Fetching Hooks**
```typescript
// ‚úÖ CORRECT: API-informed hook creation
// 1. Discover all related endpoints
// 2. Understand pagination/filtering
// 3. Check error response formats
// 4. Implement comprehensive hooks

// Example hook based on API discovery:
export function useWorkspaces() {
  // Implementation based on verified API spec
}
```

---

## **üö´ Anti-Patterns to Avoid**

### **‚ùå NEVER Do This**
```typescript
// ‚ùå Guessing API endpoints
const response = await fetch('/api/maybe-users')

// ‚ùå Assuming data structure
interface User {
  id: string // Maybe it's number?
  name: string // Maybe it's firstName/lastName?
}

// ‚ùå Hardcoding without verification
const API_BASE = 'https://api.example.com' // Is this correct?
```

### **‚úÖ ALWAYS Do This**
```typescript
// ‚úÖ API discovery first
// 1. Use mcp_API_specification_read_project_oas_67wbqv
// 2. Verify endpoint exists and structure
// 3. Get exact schemas and types
// 4. Implement with confidence

// ‚úÖ Based on verified API spec
interface UserProfile {
  id: number // Confirmed from API spec
  email: string // Confirmed from API spec
  role: 'user' | 'admin' | 'premium' // Confirmed enum values
}
```

---

## **üìä Integration with Task Master Workflow**

### **Enhanced Task Creation**
When creating tasks that involve API integration:

1. **‚úÖ API Discovery Task** (Always first)
   - Use apidof-mcp-server to understand available endpoints
   - Document findings in task details
   - Identify any missing backend endpoints

2. **‚úÖ Implementation Task** (After discovery)
   - Implement based on verified API structure
   - Use proper TypeScript types from API spec
   - Handle all documented error cases

3. **‚úÖ Testing Task** (Verify integration)
   - Test against real API endpoints
   - Verify data matches API specification
   - Test error scenarios

---

## **üîß MCP Tool Usage Examples**

### **Complete API Specification**
```typescript
// Use this to get full API overview
mcp_API_specification_read_project_oas_67wbqv({})
```

### **Specific Endpoint Details**
```typescript
// Use this to get details about specific endpoints
mcp_API_specification_read_project_oas_ref_resources_67wbqv({
  path: ["/paths/_get_users.json", "/paths/_post_auth_login.json"]
})
```

### **Refresh API Spec**
```typescript
// Use this to get latest API changes
mcp_API_specification_refresh_project_oas_67wbqv({})
```

---

## **‚ö†Ô∏è Consequences of Not Following This Rule**

### **Problems Caused by Skipping API Discovery:**
- ‚ùå **Broken Integrations**: Using wrong endpoints or data structures
- ‚ùå **Type Mismatches**: Frontend types don't match backend reality
- ‚ùå **Authentication Issues**: Wrong auth flow or token handling
- ‚ùå **Error Handling**: Missing proper error response handling
- ‚ùå **Performance Issues**: Inefficient API usage patterns
- ‚ùå **Maintenance Burden**: Code breaks when API changes
- ‚ùå **Development Time**: More debugging and rework needed

### **Benefits of Following This Rule:**
- ‚úÖ **Reliable Integrations**: Code works with real API
- ‚úÖ **Type Safety**: Perfect TypeScript integration
- ‚úÖ **Proper Error Handling**: Handle all documented error cases
- ‚úÖ **Future-Proof**: Code adapts to API changes
- ‚úÖ **Faster Development**: Less debugging, more building
- ‚úÖ **Better UX**: Proper loading states and error messages

---

## **üéØ Quality Checklist**

Before completing any API-related task:

- [ ] **API Discovery Completed** - Used apidof-mcp-server tools
- [ ] **Endpoints Verified** - Confirmed endpoints exist and work
- [ ] **Schemas Documented** - Request/response types are accurate
- [ ] **Error Cases Handled** - All documented error responses covered
- [ ] **Authentication Verified** - Auth requirements understood and implemented
- [ ] **Types Generated** - TypeScript types match API specification
- [ ] **Testing Completed** - Integration tested with real API

---

## **üîó Integration with Other Rules**

- **Follows**: [development-workflow.mdc](mdc:.cursor/rules/development-workflow.mdc) for structured approach
- **Enhances**: [taskmaster.mdc](mdc:.cursor/rules/taskmaster/taskmaster.mdc) task creation
- **Supports**: All frontend development rules with API accuracy

---

**üéØ REMEMBER**: This rule is **ABSOLUTE** and **NON-NEGOTIABLE**. Every API-related frontend development MUST start with API discovery using apidof-mcp-server tools.

---

*This rule ensures that all frontend development is based on accurate, up-to-date API information, preventing integration issues and reducing development time.*
